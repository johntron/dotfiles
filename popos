#!/bin/env python3
import os
import stat
import shutil
import shlex
import tarfile
import textwrap
import subprocess
import io
from urllib.request import urlopen

home = os.environ["HOME"]
home_bin = f'{home}/.local/bin'


def r(command, return_stdout=False, **extra):
    if return_stdout:
        return subprocess.check_output(shlex.split(command), text=True, **extra)
    subprocess.run(shlex.split(command), check=True, **extra)


def download_to(url, path, make_executable=False):
    with urlopen(url) as i:
        downloaded = i.read().decode('utf-8')
        with open(path, 'w') as o:
            o.write(downloaded)
            print(f'Wrote {path}')
    if make_executable:
        st = os.stat(path)
        os.chmod(path, st.st_mode | stat.S_IEXEC)


def read_packages_with_confirmation(filename):
    with open(filename, 'r') as f:
        packages = f.read().strip('\n')
    response = input(("Packages to be installed or upgraded:\n" +
                      textwrap.indent(packages, ' * ') +
                      "\n" +
                      "Continue? [y/N] "))
    if response.lower() != 'y':
        print('Aborting')
        quit()
    packages = packages.replace('\n', ' ')
    return packages


def apt_packages():
    packages = read_packages_with_confirmation('Aptfile')
    r(f"sudo apt install -y {packages}")


def flatpak_packages():
    packages = read_packages_with_confirmation('Flatpakfile')
    r(f"sudo flatpak install -y {packages}")


def poetry():
    print('Installing Poetry')
    ps = subprocess.Popen(f"curl -sSL https://install.python-poetry.org".split(' '), stdout=subprocess.PIPE)
    output = subprocess.check_output('python3', stdin=ps.stdout)
    ps.wait()
    print(output.decode('utf-8'))


def fish():
    if os.environ['SHELL'] == '/usr/bin/fish':
        print('Already using fish as shell')
        return
    print('Changing shell to fish')
    fish_path = shutil.which('fish')
    r(f'chsh -s {fish_path} {os.getlogin()}')
    print('Installing fisher')
    r('fish -c "curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher"')


def git():
    print('Configuring git using --global')
    r('git config --global core.editor vim')
    name = input("Name to use for git (user.name): ")
    subprocess.run(['git', 'config', '--global', 'user.name', f"'{name}'"])
    email = input("Email to use for git (user.email): ")
    r(f'git config --global user.email "{email}"')

    name = r('git config --global user.name', return_stdout=True).strip("'\n")
    email = r('git config --global user.email', return_stdout=True).strip('"\n')
    print(f"Git user set to {name} <{email}>")


def kubectx():
    print(f'Adding kubectx / kubens')
    base_repo = 'https://raw.githubusercontent.com/ahmetb/kubectx/master/'
    download_to(f'{base_repo}/kubectx', f'{home_bin}/kubectx', make_executable=True)
    download_to(f'{base_repo}/kubens', f'{home_bin}/kubens', make_executable=True)
    download_to(f'{base_repo}/completion/kubectx.fish', f'{home}/.config/fish/completions/kubectx.fish')
    download_to(f'{base_repo}/completion/kubens.fish', f'{home}/.config/fish/completions/kubens.fish')


def k9s():
    print('Installing k9s from snap')
    with urlopen('https://github.com/derailed/k9s/releases/download/v0.27.3/k9s_Linux_amd64.tar.gz') as url:
        data = io.BytesIO(url.read())
    with tarfile.open(fileobj=data) as extractor:
        extractor.extract('k9s', home_bin)


apt_packages()
flatpak_packages()
poetry()
fish()
git()
kubectx()
k9s()
